<?php
/**

 * 二分查找排序
 * 数据结构----------------数组
 * 最差时间复杂度-----------O(n^2)
 * 最优时间复杂度-----------O(nlogn)
 * 平均时间复杂度-----------O(n^2)
 * 空间复杂度--------------O(1)

————————————————
版权声明：本文为CSDN博主「lxxxxxl_」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/qq_36045946/article/details/80751831
 *
 * 原理：
 * 首先，假设表中元素是按升序排列，将表中间位置记录的关键字与查找关键字比较，如果两者相等，则查找成功；
 * 否则利用中间位置记录将表分成前、后两个子表，如果中间位置记录的关键字大于查找关键字，则进一步查找前一子表，否则进一步查找后一子表。
 * 重复以上过程，直到找到满足条件的记录，使查找成功，或直到子表不存在为止，此时查找不成功。
————————————————

 */

$arr = [1, 3, 34, 2, 32, 2, 78, -43, 53, -35, 0];
class Solution
{
    function BinarySearchSort($arr){
        for($i=1;$i<count($arr);$i++){
            $get=$arr[$i];
            $left=0;
            $right=$i-1;
            while($left<=$right){
                $mid=floor(($left+$right)/2);
                if($arr[$mid]>$get){
                    $right=$mid-1;
                }else{
                    $left=$mid+1;
                }
            }
            for($j=$i-1;$j>=$left;$j--){
                $arr[$j+1]=$arr[$j];
            }
            $arr[$left]=$get;
        }
        return $arr;
    }


}